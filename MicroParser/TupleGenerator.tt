// ----------------------------------------------------------------------------------------------
// Copyright (c) Mårten Rånge.
// ----------------------------------------------------------------------------------------------
// This source code is subject to terms and conditions of the Microsoft Public License. A 
// copy of the license can be found in the License.html file at the root of this distribution. 
// If you cannot locate the  Microsoft Public License, please send an email to 
// dlr@microsoft.com. By using this source code in any fashion, you are agreeing to be bound 
//  by the terms of the Microsoft Public License.
// ----------------------------------------------------------------------------------------------
// You must not remove this notice, or any other, from this software.
// ----------------------------------------------------------------------------------------------
namespace MicroParser
{
#if MICRO_PARSER_NET35
<#
   const int MinCount = 2;
   const int MaxCount = 3;
#>
   static partial class Tuple
   {
<#
   for (var iter = MinCount; iter <= MaxCount; ++iter)
   {
      var typeSpec = BuildTypeSpec (iter);
#>
      public static Tuple<<#=typeSpec#>> Create<<#=typeSpec#>> (
            TValue1 value1
<#
      for (var ita = 1; ita < iter; ++ita)
      {
#>
         ,  TValue<#=ita + 1#> value<#=ita + 1#>
<#
      }
#>
         )
      {
         return new Tuple<<#=typeSpec#>>
            {
<#
      for (var ita = 0; ita < iter; ++ita)
      {
#>
               Item<#=ita + 1#> = value<#=ita + 1#> ,
<#
      }
#>
            };
      }
<#
   }
#>
   }
<#
   for (var iter = MinCount; iter <= MaxCount; ++iter)
   {
      var typeSpec = BuildTypeSpec (iter);
#>
   partial struct Tuple<<#=typeSpec#>>
   {
<#
      for (var ita = 0; ita < iter; ++ita)
      {
#>
      public TValue<#=ita + 1#> Item<#=ita + 1#>;
<#
   }
#>

#if !MICRO_PARSER_SUPPRESS_ANONYMOUS_TYPE
      public override string ToString ()
      {
         return new 
         {
<#
      for (var ita = 0; ita < iter; ++ita)
      {
#>
            Item<#=ita + 1#>,
<#
   }
#>
         }.ToString ();
      }
#endif
   }
<#
   }
#>
#endif
}
<#+
   static string BuildTypeSpec (int iter)
   {
      var sb = new System.Text.StringBuilder ("TValue1");

      for (var ita = 1; ita < iter; ++ita)
      {
         sb.Append (", TValue");
         sb.Append (ita + 1);
      }

      return sb.ToString ();
   }
#>